// generated by ../sqlpp11/scripts/ddl2cpp ./schema/timer.sql timer_db TimerDB
#ifndef TIMERDB_TIMER_DB_H
#define TIMERDB_TIMER_DB_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>


namespace TimerDB
{
  namespace Entries_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct Duration
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duration";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duration;
            T& operator()() { return duration; }
            const T& operator()() const { return duration; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct StartTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startTime;
            T& operator()() { return startTime; }
            const T& operator()() const { return startTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  }

  struct Entries: sqlpp::table_t<Entries,
               Entries_::Id,
               Entries_::Description,
               Entries_::Duration,
               Entries_::StartTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Entries";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Entries;
        T& operator()() { return Entries; }
        const T& operator()() const { return Entries; }
      };
    };
  };
}
#endif
