/* generated by rust_qt_binding_generator */
#![allow(unknown_lints)]
#![allow(mutex_atomic, needless_pass_by_value)]
use libc::{c_int, c_void, uint8_t, uint16_t};
use std::slice;

use std::sync::{Arc, Mutex};
use std::ptr::null;

use implementation::*;

pub struct LogQObject {}

#[derive(Clone)]
pub struct LogEmitter {
    qobject: Arc<Mutex<*const LogQObject>>,
    day_total_changed: fn(*const LogQObject),
}

unsafe impl Send for LogEmitter {}

impl LogEmitter {
    fn clear(&self) {
        *self.qobject.lock().unwrap() = null();
    }
    pub fn day_total_changed(&self) {
        let ptr = *self.qobject.lock().unwrap();
        if !ptr.is_null() {
            (self.day_total_changed)(ptr);
        }
    }
}

pub trait LogTrait {
    fn new(emit: LogEmitter) -> Self;
    fn emit(&self) -> &LogEmitter;
    fn day_total(&self) -> u64;
}

#[no_mangle]
pub extern "C" fn log_new(
    log: *mut LogQObject,
    day_total_changed: fn(*const LogQObject),
) -> *mut Log {
    let log_emit = LogEmitter {
        qobject: Arc::new(Mutex::new(log)),
        day_total_changed: day_total_changed,
    };
    let d_log = Log::new(log_emit);
    Box::into_raw(Box::new(d_log))
}

#[no_mangle]
pub unsafe extern "C" fn log_free(ptr: *mut Log) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn log_day_total_get(ptr: *const Log) -> u64 {
    (&*ptr).day_total()
}
